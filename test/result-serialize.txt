test-serialize.js typeof serialize: function

Test1 (Date):
  const src = new Date();
    src:   2020-02-09T16:18:05.671Z
    ser:   {
  "_Serialize_Any_Encoded": true,
  "_SA_Content": {
    "_SAType": "Date",
    "_SAtimestamp": 1581265085671
  }
}
    deser: 2020-02-09T16:18:05.671Z

Test2 (Map):
  let src = new Map();
  let key1 = "key1";
  let key2 = {foo: "bar"};
  src.set(key1, "key1 value");
  src.set(key2, new Date());
    src:   Map(2) {
  'key1' => 'key1 value',
  { foo: 'bar' } => 2020-02-09T16:18:05.673Z
}
    ser:   {
  "_Serialize_Any_Encoded": true,
  "_SA_Content": {
    "_SAType": "Map",
    "_SAkvPairs": [
      [
        "key1",
        "key1 value"
      ],
      [
        {
          "foo": "bar"
        },
        {
          "_SAType": "Date",
          "_SAtimestamp": 1581265085673
        }
      ]
    ]
  }
} 

    deser: Map(2) {
  'key1' => 'key1 value',
  { foo: 'bar' } => 2020-02-09T16:18:05.673Z
}

Test3 (Function):
  let src = function foo (x) { return x + 1;};
    src:   [Function: foo]
    src.toString:      function foo (x) { return x + 1;}
    ser:   {
  "_Serialize_Any_Encoded": true,
  "_SA_Content": {
    "_SAType": "Function",
    "_SAfunction": "function foo (x) { return x + 1;}"
  }
}
    deser: [Function: foo]
    deser.toString():  function foo (x) { return x + 1;}
    deser(10): 11

Test4: (RegExp)
  let src = [1,2,/abc/i];
    src:  [ 1, 2, /abc/i ]
    ser:  {
  "_Serialize_Any_Encoded": true,
  "_SA_Content": [
    1,
    2,
    {
      "_SAType": "RegExp",
      "_SAsource": "abc",
      "_SAflags": "i"
    }
  ]
}
    deser: [ 1, 2, /abc/i ]

Test5 (Int8Array):
  let src = Int8Array.from([3, 4, 42]);
    src:   Int8Array [ 3, 4, 42 ]
    ser:   {
  "_Serialize_Any_Encoded": true,
  "_SA_Content": {
    "_SAType": "Int8Array",
    "_SAvalues": [
      3,
      4,
      42
    ]
  }
}
    deser: Int8Array [ 3, 4, 42 ]

Test6 (Uint8Array):
  let src = Uint8Array.from([3, 128, 64]);
    src:   Uint8Array [ 3, 128, 64 ]
    ser:   {
  "_Serialize_Any_Encoded": true,
  "_SA_Content": {
    "_SAType": "Uint8Array",
    "_SAvalues": [
      3,
      128,
      64
    ]
  }
}
    deser: Uint8Array [ 3, 128, 64 ]

Test7 (Int16Array):
  let src = Int16Array.from([32, 128, 64]);
    src:   Int16Array [ 32, 128, 64 ]
    ser:   {
  "_Serialize_Any_Encoded": true,
  "_SA_Content": {
    "_SAType": "Int16Array",
    "_SAvalues": [
      32,
      128,
      64
    ]
  }
}
    deser: Int16Array [ 32, 128, 64 ]

Test8 (Uint16Array):
  let src = Uint16Array.from([32, 128, 64]);
    src:   Uint16Array [ 32, 128, 64 ]
    ser:   {
  "_Serialize_Any_Encoded": true,
  "_SA_Content": {
    "_SAType": "Uint16Array",
    "_SAvalues": [
      32,
      128,
      64
    ]
  }
}
    deser: Uint16Array [ 32, 128, 64 ]

Test9 (Int32Array):
  let src = Int32Array.from([32, 128, 64]);
    src:   Int32Array [ 32, 128, 64 ]
    ser:   {
  "_Serialize_Any_Encoded": true,
  "_SA_Content": {
    "_SAType": "Int32Array",
    "_SAvalues": [
      32,
      128,
      64
    ]
  }
}
    deser: Int32Array [ 32, 128, 64 ]

Test10 (Uint32Array):
  let src = Uint32Array.from([32, 128, 64]);
    src:   Uint32Array [ 32, 128, 64 ]
    ser:   {
  "_Serialize_Any_Encoded": true,
  "_SA_Content": {
    "_SAType": "Uint32Array",
    "_SAvalues": [
      32,
      128,
      64
    ]
  }
}
    deser: Uint32Array [ 32, 128, 64 ]

Test11 (Float32Array):
  let src = Float32Array.from([32, 128, 64]);
    src:   Float32Array [ 32, 128, 64 ]
    ser:   {
  "_Serialize_Any_Encoded": true,
  "_SA_Content": {
    "_SAType": "Float32Array",
    "_SAvalues": [
      32,
      128,
      64
    ]
  }
}
    deser: Float32Array [ 32, 128, 64 ]

Test12 (Float64Array):
  let src = Float64Array.from([32, 128, 64]);
    src:   Float64Array [ 32, 128, 64 ]
    ser:   {
  "_Serialize_Any_Encoded": true,
  "_SA_Content": {
    "_SAType": "Float64Array",
    "_SAvalues": [
      "32",
      "128",
      "64"
    ]
  }
}
    deser: Float64Array [ 32, 128, 64 ]

Test13 (BigInt64Array):
  let src = BigInt64Array.from([32, 128, 64]);
    src:   BigInt64Array [ 3n, 4n, 42n ]
    ser:   {
  "_Serialize_Any_Encoded": true,
  "_SA_Content": {
    "_SAType": "BigInt64Array",
    "_SAvalues": [
      "3",
      "4",
      "42"
    ]
  }
}
    deser: BigInt64Array [ 3n, 4n, 42n ]

Test14 (BigUint64Array):
  let src = BigUint64Array.from([3000000000000000000n, 4n, 42n]);
    src:   BigUint64Array [ 3000000000000000000n, 4n, 42n ]
    ser:   {
  "_Serialize_Any_Encoded": true,
  "_SA_Content": {
    "_SAType": "BigUint64Array",
    "_SAvalues": [
      "3000000000000000000",
      "4",
      "42"
    ]
  }
}
    deser: BigUint64Array [ 3000000000000000000n, 4n, 42n ]

Test14a (ArrayBuffer):
  let aBuf = new ArrayBuffer(8);
  let src = new Uint8Array(aBuf);
  let data = [1, 2, 3, 4, 5, 127];
    data:  [ 1, 2, 3, 4, 5, 127 ]
    src:   ArrayBuffer {
  [Uint8Contents]: <01 02 03 04 05 7f 00 00>,
  byteLength: 8
}
    aBuf:  ArrayBuffer {
  [Uint8Contents]: <01 02 03 04 05 7f 00 00>,
  byteLength: 8
}
    ser: {"_Serialize_Any_Encoded":true,"_SA_Content":{"_SAType":"ArrayBuffer","_SAvalues":[1,2,3,4,5,127,0,0]}}
    deser:  ArrayBuffer {
  [Uint8Contents]: <01 02 03 04 05 7f 00 00>,
  byteLength: 8
}

Test15 (Set):
  let src = new Set([1,2,"3",{createdAt: new Date()}]);
    src:  Set(4) { 1, 2, '3', { createdAt: 2020-02-09T16:18:05.682Z } }
    ser:   {
  "_Serialize_Any_Encoded": true,
  "_SA_Content": {
    "_SAType": "Set",
    "_SAvalues": [
      1,
      2,
      "3",
      {
        "createdAt": {
          "_SAType": "Date",
          "_SAtimestamp": 1581265085682
        }
      }
    ]
  }
}
    deser: Set(4) { 1, 2, '3', { createdAt: 2020-02-09T16:18:05.682Z } }

Test16 (WeakSet):
  let src = new WeakSet();
  let obj = {value: "in the set"}
  src.add(obj);
    src:  WeakSet { <items unknown> }
*** TEST FAILED: Error: serialize WeakSet not supported

Test17 (WeakMap):
  let src = new WeakMap();
  let obj = { foo: "I am foo" };
  src.set(obj, 42);
    src:  WeakMap { <items unknown> }
*** TEST FAILED: Error: serialize WeakMap not supported

Test18 (Buffer):
  let src = Buffer.from("hello world");
    src:  <Buffer 68 65 6c 6c 6f 20 77 6f 72 6c 64>
    ser:   {
  "_Serialize_Any_Encoded": true,
  "_SA_Content": {
    "_SAType": "Buffer",
    "_SAutf8String": "hello world"
  }
}
    deser: <Buffer 68 65 6c 6c 6f 20 77 6f 72 6c 64>

Test19 (CustomObject):
  class CustomObject extends Object {
    custom () {return "I am a custom Object";}
  }
  let src = new CustomObject();
  src.key = "value";
  src.key2 = [1,2, new Date()];
    src:  CustomObject { key: 'value', key2: [ 1, 2, 2020-02-09T16:18:05.684Z ] }
    src.custom():  I am a custom Object
    ser:   {
  "_Serialize_Any_Encoded": true,
  "_SA_Content": {
    "_SAType": "_SACustomObject",
    "_SAconstructorName": "CustomObject",
    "_SAobject": {
      "key": "value",
      "key2": [
        1,
        2,
        {
          "_SAType": "Date",
          "_SAtimestamp": 1581265085684
        }
      ]
    }
  }
}
    deser: CustomObject { key: 'value', key2: [ 1, 2, 2020-02-09T16:18:05.684Z ] }
    deser.custom():  I am a custom Object

Test20 (CustomArray):
  class CustomArray extends Array {
    custom () {return "I am a custom Array";}
  }
  let src = CustomArray.from([1,2,"foo",{key: [1,2,3, /abc/g]}]);
    src:  CustomArray [ 1, 2, 'foo', { key: [ 1, 2, 3, /abc/g ] } ]
    src.custom():  I am a custom Array
    ser:   {
  "_Serialize_Any_Encoded": true,
  "_SA_Content": {
    "_SAType": "_SACustomArray",
    "_SAconstructorName": "CustomArray",
    "_SAvalues": [
      1,
      2,
      "foo",
      {
        "key": [
          1,
          2,
          3,
          {
            "_SAType": "RegExp",
            "_SAsource": "abc",
            "_SAflags": "g"
          }
        ]
      }
    ]
  }
}
    deser: CustomArray [ 1, 2, 'foo', { key: [ 1, 2, 3, /abc/g ] } ]
    deser.custom(): I am a custom Array

Test21 (Array containing BigInt):
  let src = [1, 2, 3000000000n];
    src:  [ 1, 2, 3000000000n ]
    ser:   {
  "_Serialize_Any_Encoded": true,
  "_SA_Content": [
    1,
    2,
    {
      "_SAType": "BigInt",
      "_SAnum": "3000000000"
    }
  ]
}
    deser: [ 1, 2, 3000000000n ]

End of test.

Errors:  [
  'Test16 Error: serialize WeakSet not supported',
  'Test17 Error: serialize WeakMap not supported'
]
